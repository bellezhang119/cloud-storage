// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: files.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (folder_id, user_id, name, file_path, size_bytes, mime_type)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, folder_id, user_id, name, file_path, size_bytes, mime_type, is_trashed, created_at, updated_at, deleted_at
`

type CreateFileParams struct {
	FolderID  uuid.NullUUID
	UserID    sql.NullInt32
	Name      string
	FilePath  string
	SizeBytes int64
	MimeType  sql.NullString
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.FolderID,
		arg.UserID,
		arg.Name,
		arg.FilePath,
		arg.SizeBytes,
		arg.MimeType,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FolderID,
		&i.UserID,
		&i.Name,
		&i.FilePath,
		&i.SizeBytes,
		&i.MimeType,
		&i.IsTrashed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFileByID = `-- name: GetFileByID :one
SELECT id, folder_id, user_id, name, file_path, size_bytes, mime_type, is_trashed, created_at, updated_at, deleted_at FROM files WHERE id = $1
`

func (q *Queries) GetFileByID(ctx context.Context, id uuid.UUID) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FolderID,
		&i.UserID,
		&i.Name,
		&i.FilePath,
		&i.SizeBytes,
		&i.MimeType,
		&i.IsTrashed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFileByNameInFolder = `-- name: GetFileByNameInFolder :one
SELECT id, folder_id, user_id, name, file_path, size_bytes, mime_type, is_trashed, created_at, updated_at, deleted_at FROM files
WHERE folder_id = $1 AND name = $2 AND is_trashed = FALSE
`

type GetFileByNameInFolderParams struct {
	FolderID uuid.NullUUID
	Name     string
}

func (q *Queries) GetFileByNameInFolder(ctx context.Context, arg GetFileByNameInFolderParams) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByNameInFolder, arg.FolderID, arg.Name)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FolderID,
		&i.UserID,
		&i.Name,
		&i.FilePath,
		&i.SizeBytes,
		&i.MimeType,
		&i.IsTrashed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listFilesInFolder = `-- name: ListFilesInFolder :many
SELECT id, folder_id, user_id, name, file_path, size_bytes, mime_type, is_trashed, created_at, updated_at, deleted_at
FROM files
WHERE (folder_id = $1 OR ($1 IS NULL AND folder_id IS NULL))
  AND is_trashed = FALSE
ORDER BY name
`

func (q *Queries) ListFilesInFolder(ctx context.Context, folderID uuid.NullUUID) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, listFilesInFolder, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.FolderID,
			&i.UserID,
			&i.Name,
			&i.FilePath,
			&i.SizeBytes,
			&i.MimeType,
			&i.IsTrashed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const permanentlyDeleteFile = `-- name: PermanentlyDeleteFile :execrows
DELETE FROM files
WHERE id = $1 AND user_id = $2
`

type PermanentlyDeleteFileParams struct {
	ID     uuid.UUID
	UserID sql.NullInt32
}

func (q *Queries) PermanentlyDeleteFile(ctx context.Context, arg PermanentlyDeleteFileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, permanentlyDeleteFile, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const restoreFile = `-- name: RestoreFile :execrows
UPDATE files
SET is_trashed = FALSE, deleted_at = NULL
WHERE id = $1 AND user_id = $2
`

type RestoreFileParams struct {
	ID     uuid.UUID
	UserID sql.NullInt32
}

func (q *Queries) RestoreFile(ctx context.Context, arg RestoreFileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, restoreFile, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const trashFile = `-- name: TrashFile :execrows
UPDATE files
SET is_trashed = TRUE, deleted_at = now()
WHERE id = $1 AND user_id = $2
`

type TrashFileParams struct {
	ID     uuid.UUID
	UserID sql.NullInt32
}

func (q *Queries) TrashFile(ctx context.Context, arg TrashFileParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, trashFile, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateFileMetadata = `-- name: UpdateFileMetadata :execrows
UPDATE files
SET name = $2, updated_at = now()
WHERE id = $1 AND user_id = $3
`

type UpdateFileMetadataParams struct {
	ID     uuid.UUID
	Name   string
	UserID sql.NullInt32
}

func (q *Queries) UpdateFileMetadata(ctx context.Context, arg UpdateFileMetadataParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateFileMetadata, arg.ID, arg.Name, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateFilePath = `-- name: UpdateFilePath :execrows
UPDATE files
SET file_path = $2, updated_at = now()
WHERE id = $1 AND user_id = $3
`

type UpdateFilePathParams struct {
	ID       uuid.UUID
	FilePath string
	UserID   sql.NullInt32
}

func (q *Queries) UpdateFilePath(ctx context.Context, arg UpdateFilePathParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateFilePath, arg.ID, arg.FilePath, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
