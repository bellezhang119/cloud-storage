// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: folders.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFolder = `-- name: CreateFolder :one
INSERT INTO folders (user_id, name, parent_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, parent_id, created_at, updated_at
`

type CreateFolderParams struct {
	UserID   sql.NullInt32
	Name     string
	ParentID uuid.NullUUID
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (Folder, error) {
	row := q.db.QueryRowContext(ctx, createFolder, arg.UserID, arg.Name, arg.ParentID)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFolder = `-- name: DeleteFolder :execrows
DELETE FROM folders
WHERE id = $1 AND user_id = $2
`

type DeleteFolderParams struct {
	ID     uuid.UUID
	UserID sql.NullInt32
}

func (q *Queries) DeleteFolder(ctx context.Context, arg DeleteFolderParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteFolder, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getFolderByID = `-- name: GetFolderByID :one
SELECT id, user_id, name, parent_id, created_at, updated_at FROM folders WHERE id = $1
`

func (q *Queries) GetFolderByID(ctx context.Context, id uuid.UUID) (Folder, error) {
	row := q.db.QueryRowContext(ctx, getFolderByID, id)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFoldersByParent = `-- name: ListFoldersByParent :many
SELECT id, user_id, name, parent_id, created_at, updated_at FROM folders
WHERE user_id = $1 AND parent_id = $2
ORDER BY name
`

type ListFoldersByParentParams struct {
	UserID   sql.NullInt32
	ParentID uuid.NullUUID
}

func (q *Queries) ListFoldersByParent(ctx context.Context, arg ListFoldersByParentParams) ([]Folder, error) {
	rows, err := q.db.QueryContext(ctx, listFoldersByParent, arg.UserID, arg.ParentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
