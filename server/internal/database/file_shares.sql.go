// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file_shares.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getFileShares = `-- name: GetFileShares :many
SELECT id, file_id, shared_with, permission, created_at FROM file_shares WHERE file_id = $1
`

func (q *Queries) GetFileShares(ctx context.Context, fileID uuid.NullUUID) ([]FileShare, error) {
	rows, err := q.db.QueryContext(ctx, getFileShares, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileShare
	for rows.Next() {
		var i FileShare
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.SharedWith,
			&i.Permission,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFileShare = `-- name: RemoveFileShare :exec
DELETE FROM file_shares
WHERE file_id = $1 AND shared_with = $2
`

type RemoveFileShareParams struct {
	FileID     uuid.NullUUID
	SharedWith sql.NullInt32
}

func (q *Queries) RemoveFileShare(ctx context.Context, arg RemoveFileShareParams) error {
	_, err := q.db.ExecContext(ctx, removeFileShare, arg.FileID, arg.SharedWith)
	return err
}

const shareFile = `-- name: ShareFile :one
INSERT INTO file_shares (file_id, shared_with, permission)
VALUES ($1, $2, $3)
ON CONFLICT (file_id, shared_with) DO UPDATE
SET permission = EXCLUDED.permission
RETURNING id, file_id, shared_with, permission, created_at
`

type ShareFileParams struct {
	FileID     uuid.NullUUID
	SharedWith sql.NullInt32
	Permission sql.NullString
}

func (q *Queries) ShareFile(ctx context.Context, arg ShareFileParams) (FileShare, error) {
	row := q.db.QueryRowContext(ctx, shareFile, arg.FileID, arg.SharedWith, arg.Permission)
	var i FileShare
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.SharedWith,
		&i.Permission,
		&i.CreatedAt,
	)
	return i, err
}
