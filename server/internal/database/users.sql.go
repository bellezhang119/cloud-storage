// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password_hash,
    is_verified,
    verification_token,
    verification_token_expiry,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
RETURNING id, email, password_hash, is_verified, verification_token, verification_token_expiry, used_storage, created_at, updated_at
`

type CreateUserParams struct {
	Email                   string
	PasswordHash            string
	IsVerified              bool
	VerificationToken       sql.NullString
	VerificationTokenExpiry sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.IsVerified,
		arg.VerificationToken,
		arg.VerificationTokenExpiry,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.VerificationToken,
		&i.VerificationTokenExpiry,
		&i.UsedStorage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, is_verified, verification_token, verification_token_expiry, used_storage, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.VerificationToken,
		&i.VerificationTokenExpiry,
		&i.UsedStorage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password_hash, is_verified, verification_token, verification_token_expiry, used_storage, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.VerificationToken,
		&i.VerificationTokenExpiry,
		&i.UsedStorage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByVerificationToken = `-- name: GetUserByVerificationToken :one
SELECT id, email, password_hash, is_verified, verification_token, verification_token_expiry, used_storage, created_at, updated_at FROM users WHERE verification_token = $1
`

func (q *Queries) GetUserByVerificationToken(ctx context.Context, verificationToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByVerificationToken, verificationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsVerified,
		&i.VerificationToken,
		&i.VerificationTokenExpiry,
		&i.UsedStorage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const markUserAsVerified = `-- name: MarkUserAsVerified :execrows
UPDATE users
SET is_verified = TRUE,
    verification_token = NULL,
    verification_token_expiry = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) MarkUserAsVerified(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, markUserAsVerified, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUsedStorage = `-- name: UpdateUsedStorage :execrows
UPDATE users
SET used_storage = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUsedStorageParams struct {
	ID          int32
	UsedStorage int64
}

func (q *Queries) UpdateUsedStorage(ctx context.Context, arg UpdateUsedStorageParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUsedStorage, arg.ID, arg.UsedStorage)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUserPassword = `-- name: UpdateUserPassword :execrows
UPDATE users
SET password_hash = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           int32
	PasswordHash string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateVerificationToken = `-- name: UpdateVerificationToken :execrows
UPDATE users
SET verification_token = $1,
    verification_token_expiry = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE email = $3
`

type UpdateVerificationTokenParams struct {
	VerificationToken       sql.NullString
	VerificationTokenExpiry sql.NullTime
	Email                   string
}

func (q *Queries) UpdateVerificationToken(ctx context.Context, arg UpdateVerificationTokenParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateVerificationToken, arg.VerificationToken, arg.VerificationTokenExpiry, arg.Email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
