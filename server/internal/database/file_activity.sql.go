// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: file_activity.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const listFileActivity = `-- name: ListFileActivity :many
SELECT id, file_id, user_id, action, details, created_at FROM file_activity
WHERE file_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListFileActivity(ctx context.Context, fileID uuid.NullUUID) ([]FileActivity, error) {
	rows, err := q.db.QueryContext(ctx, listFileActivity, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileActivity
	for rows.Next() {
		var i FileActivity
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.UserID,
			&i.Action,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserActivity = `-- name: ListUserActivity :many
SELECT id, file_id, user_id, action, details, created_at FROM file_activity
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserActivity(ctx context.Context, userID sql.NullInt32) ([]FileActivity, error) {
	rows, err := q.db.QueryContext(ctx, listUserActivity, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileActivity
	for rows.Next() {
		var i FileActivity
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.UserID,
			&i.Action,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logFileActivity = `-- name: LogFileActivity :one
INSERT INTO file_activity (file_id, user_id, action, details)
VALUES ($1, $2, $3, $4)
RETURNING id, file_id, user_id, action, details, created_at
`

type LogFileActivityParams struct {
	FileID  uuid.NullUUID
	UserID  sql.NullInt32
	Action  string
	Details pqtype.NullRawMessage
}

func (q *Queries) LogFileActivity(ctx context.Context, arg LogFileActivityParams) (FileActivity, error) {
	row := q.db.QueryRowContext(ctx, logFileActivity,
		arg.FileID,
		arg.UserID,
		arg.Action,
		arg.Details,
	)
	var i FileActivity
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.UserID,
		&i.Action,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}
