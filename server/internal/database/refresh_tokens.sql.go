// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"
)

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token_hash, user_id, expires_at, revoked FROM refresh_tokens WHERE token_hash = $1
`

type GetRefreshTokenRow struct {
	TokenHash string
	UserID    int32
	ExpiresAt time.Time
	Revoked   bool
}

func (q *Queries) GetRefreshToken(ctx context.Context, tokenHash string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, tokenHash)
	var i GetRefreshTokenRow
	err := row.Scan(
		&i.TokenHash,
		&i.UserID,
		&i.ExpiresAt,
		&i.Revoked,
	)
	return i, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :exec
INSERT INTO refresh_tokens (token_hash, user_id, expires_at) VALUES ($1, $2, $3)
`

type InsertRefreshTokenParams struct {
	TokenHash string
	UserID    int32
	ExpiresAt time.Time
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertRefreshToken, arg.TokenHash, arg.UserID, arg.ExpiresAt)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens SET revoked = TRUE WHERE token_hash = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, tokenHash)
	return err
}
